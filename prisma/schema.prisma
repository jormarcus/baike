// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  hashedPassword String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  accounts       Account[]
  sessions       Session[]
  Like           Like[]
  Rating         Rating[]
  Note           Note[]
  Review         Review[]
  ReviewLike     ReviewLike[]
  NoteLike       NoteLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Recipe {
  id            String    @id @default(cuid())
  title         String
  description   String?
  instructions  String?
  prepTime      DateTime?
  cookTime      DateTime?
  servings      Int?
  image         String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  isPrivate     Boolean   @default(false)
  likes         Like[]
  likesCount    Int       @default(0)
  averageRating Float     @default(0)
  ratings       Rating[]
  ratingsCount  Int       @default(0)
  notes         Note[]
  notesCount    Int       @default(0)
  reviews       Review[]
  reviewsCount  Int       @default(0)
}

model Collection {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPrivate Boolean  @default(false)
}

model UserRecipeCollection {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  recipeId     String   @map("recipe_id")
  collectionId String   @map("collection_id")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isPrivate    Boolean  @default(false)
  likes        Like[]
  likesCount   Int      @default(0)

  @@unique([userId, recipeId, collectionId])
  @@map("user_recipe_collection")
}

model Like {
  id                     String                @id @default(cuid())
  userId                 String                @map("user_id")
  recipeId               String                @map("recipe_id")
  reviewId               String                @map("review_id")
  user                   User                  @relation(fields: [userId], references: [id])
  recipe                 Recipe                @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  review                 Review                @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  UserRecipeCollection   UserRecipeCollection? @relation(fields: [userRecipeCollectionId], references: [id])
  userRecipeCollectionId String?
}

model Rating {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  recipeId String @map("recipe_id")
  rating   Int
  user     User   @relation(fields: [userId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Note {
  id       String     @id @default(cuid())
  userId   String     @map("user_id")
  recipeId String     @map("recipe_id")
  note     String
  jser     User       @relation(fields: [userId], references: [id])
  recipe   Recipe     @relation(fields: [recipeId], references: [id])
  noteLike NoteLike[]
}

model Review {
  id         String       @id @default(cuid())
  userId     String       @map("user_id")
  recipeId   String       @map("recipe_id")
  review     String
  User       User         @relation(fields: [userId], references: [id])
  recipe     Recipe       @relation(fields: [recipeId], references: [id])
  reviewLike ReviewLike[]
  like       Like[]
  likeCount  Int          @default(0)
}

model ReviewLike {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  reviewId String @map("review_id")
  user     User   @relation(fields: [userId], references: [id])
  review   Review @relation(fields: [reviewId], references: [id])
}

model NoteLike {
  id     String @id @default(cuid())
  userId String @map("user_id")
  noteId String @map("note_id")
  user   User   @relation(fields: [userId], references: [id])
  note   Note   @relation(fields: [noteId], references: [id])
}
