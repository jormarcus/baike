// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             Int          @id @default(autoincrement())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  hashedPassword String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  accounts       Account[]
  sessions       Session[]
  Like           Like[]
  Rating         Rating[]
  Note           Note[]
  Review         Review[]
  ReviewLike     ReviewLike[]
  NoteLike       NoteLike[]
  Chat           Chat[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Recipe {
  id                Int                 @id @default(autoincrement())
  name              String
  imageSrc          String?
  authorId          Int                 @map("user_id")
  url               String?
  ingredients       String[]
  instructions      String[]
  prepHours         Int?
  prepMinutes       Int?
  cookHours         Int?
  cookMinutes       Int?
  servings          Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isPublic          Boolean             @default(true)
  // likes                Like[]
  likesCount        Int                 @default(0)
  // averageRating        Float?                 @default(0)
  // ratings              Rating[]
  // ratingsCount         Int?                   @default(0)
  notes             String?
  // notesCount           Int                    @default(0)
  // reviews              Review[]
  // reviewsCount         Int                    @default(0)
  collections       Collection[]
  RecipeIngredients RecipeIngredients[]
}

model Ingredient {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  RecipeIngredients RecipeIngredients[]
}

model RecipeIngredients {
  id           Int        @id @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int        @map("recipe_id")
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int        @map("ingredient_id")
}

model Collection {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isPublic   Boolean  @default(false)
  likes      Like[]
  likesCount Int      @default(0)
  recipes    Recipe[]
}

model Like {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  recipeId     Int        @map("recipe_id")
  reviewId     Int        @map("review_id")
  collectionId Int        @map("collection_id")
  user         User       @relation(fields: [userId], references: [id])
  // recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  review       Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Rating {
  id       Int  @id @default(autoincrement())
  userId   Int  @map("user_id")
  recipeId Int  @map("recipe_id")
  rating   Int
  user     User @relation(fields: [userId], references: [id])
  // recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Note {
  id       Int        @id @default(autoincrement())
  userId   Int        @map("user_id")
  recipeId Int        @map("recipe_id")
  note     String
  user     User       @relation(fields: [userId], references: [id])
  // recipe   Recipe     @relation(fields: [recipeId], references: [id])
  noteLike NoteLike[]
}

model Review {
  id         Int          @id @default(autoincrement())
  userId     Int          @map("user_id")
  recipeId   Int          @map("recipe_id")
  review     String
  User       User         @relation(fields: [userId], references: [id])
  // recipe     Recipe       @relation(fields: [recipeId], references: [id])
  reviewLike ReviewLike[]
  like       Like[]
  likeCount  Int          @default(0)
}

model ReviewLike {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id")
  reviewId Int    @map("review_id")
  user     User   @relation(fields: [userId], references: [id])
  review   Review @relation(fields: [reviewId], references: [id])
}

model NoteLike {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  noteId Int  @map("note_id")
  user   User @relation(fields: [userId], references: [id])
  note   Note @relation(fields: [noteId], references: [id])
}

model Chat {
  id                Int       @id @default(autoincrement())
  title             String
  userId            Int       @map("user_id")
  messages          Message[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  userMessagesCount Int       @default(0)
}

model Message {
  id            Int      @id @default(autoincrement())
  isUserMessage Boolean
  text          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatId        Int      @map("chat_id")
  chat          Chat     @relation(fields: [chatId], references: [id])
}
