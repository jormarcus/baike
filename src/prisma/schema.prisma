generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  email          String       @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  hashedPassword String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Chat           Chat[]
  Comment        Comment[]
  Like           Like[]
  notes          Note[]
  NoteLike       NoteLike[]
  Post           Post[]
  ratings        Rating[]
  reviews        Review[]
  ReviewLike     ReviewLike[]
  accounts       Account[]
  sessions       Session[]
  avoidances     Avoidance[]
  RecipeView     RecipeView[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Recipe {
  id            Int          @id @default(autoincrement())
  name          String
  imageSrc      String?
  authorId      Int          @map("user_id")
  url           String?
  description   String?
  servings      Int?
  instructions  String[]
  prepHours     Int          @default(0)
  prepMinutes   Int          @default(0)
  cookHours     Int          @default(0)
  cookMinutes   Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isPublic      Boolean      @default(true)
  likesCount    Int          @default(0)
  notes         String?
  averageRating Float        @default(0)
  posts         Post[]
  ratings       Rating[]
  collections   Collection[] @relation("CollectionToRecipe")
  ingredients   Ingredient[] @relation("IngredientToRecipe")
  RecipeView    RecipeView[]
}

model Ingredient {
  id              Int         @id @default(autoincrement())
  name            String
  quantity        Float?
  quantity2       Float?
  unitOfMeasure   String?
  unitOfMeasureID String?
  isGroupHeader   Boolean     @default(false)
  input           String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Int         @default(0)
  recipes         Recipe[]    @relation("IngredientToRecipe")
  avoidances      Avoidance[]
}

model Avoidance {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Collection {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  name       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isPublic   Boolean  @default(false)
  likesCount Int      @default(0)
  likes      Like[]
  recipes    Recipe[] @relation("CollectionToRecipe")
}

model Like {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  recipeId     Int        @map("recipe_id")
  reviewId     Int        @map("review_id")
  collectionId Int        @map("collection_id")
  commentId    Int        @map("comment_id")
  postId       Int        @map("post_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  comment      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  review       Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  recipeId  Int      @map("recipe_id")
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id       Int        @id @default(autoincrement())
  userId   Int        @map("user_id")
  recipeId Int        @map("recipe_id")
  note     String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  noteLike NoteLike[]
}

model Review {
  id         Int          @id @default(autoincrement())
  userId     Int          @map("user_id")
  recipeId   Int          @map("recipe_id")
  review     String
  likeCount  Int          @default(0)
  like       Like[]
  User       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewLike ReviewLike[]
}

model ReviewLike {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id")
  reviewId Int    @map("review_id")
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NoteLike {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  noteId Int  @map("note_id")
  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id                Int       @id @default(autoincrement())
  title             String
  userId            Int       @map("user_id")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userMessagesCount Int       @default(0) @map("user_messages_count")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages          Message[]
}

model Message {
  id            Int      @id @default(autoincrement())
  isUserMessage Boolean  @map("is_user_message")
  text          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatId        Int      @map("chat_id")
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Post {
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   Int       @map("user_id")
  id         Int       @id @default(autoincrement())
  likesCount Int       @default(0)
  image      String?
  recipeId   Int?
  comments   Comment[]
  likes      Like[]
  Recipe     Recipe?   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  text      String
  createdAt DateTime  @default(now())
  authorId  Int       @map("user_id")
  id        Int       @id @default(autoincrement())
  postId    Int
  replyToId Int?
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Like      Like[]
}

model RecipeView {
  id       Int      @id @default(autoincrement())
  userId   Int
  recipeId Int
  viewedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}
